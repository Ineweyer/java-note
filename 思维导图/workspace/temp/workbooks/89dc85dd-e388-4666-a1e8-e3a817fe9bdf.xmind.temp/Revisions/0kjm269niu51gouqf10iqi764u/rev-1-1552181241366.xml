<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="0kjm269niu51gouqf10iqi764u" modified-by="lq_lab" theme="3v24g6t6sgm0dg9c5daor85hrg" timestamp="1552181230248" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="724l6fbbbncimuvribmsus2lq1" modified-by="lq_lab" structure-class="org.xmind.ui.map.unbalanced" timestamp="1552181033303"><title>垃圾收集器</title><children><topics type="attached"><topic id="65ejh7mpgu9q05s6t0t9rgj5d9" modified-by="lq_lab" timestamp="1552181033299"><title>垃圾收集算法</title><children><topics type="attached"><topic id="1grhhnmlp9qn7qmmi21e8fbtv0" modified-by="lq_lab" timestamp="1552181033296"><title>标记-删除法</title><children><topics type="attached"><topic id="6b5q39ugpvng34ac0437tgkm4a" modified-by="lq_lab" timestamp="1552181033295"><title>优点</title><children><topics type="attached"><topic id="0v4j560v0d37hqrdsnpg0gsd1e" modified-by="lq_lab" timestamp="1552181033294"><title>简单高效</title></topic><topic id="29fsrvj1bq4ptkd35uck4iuoto" modified-by="lq_lab" timestamp="1552181033294"><title>串行</title></topic></topics></children></topic><topic id="7adgkclueu6i06vmmu50ckglfk" modified-by="lq_lab" timestamp="1552181033295"><title>缺点</title><children><topics type="attached"><topic id="319ic2haj8tacd7rdf8aeetmki" modified-by="lq_lab" timestamp="1552181033295"><title>内存不连续（碎片化严重）</title></topic></topics></children></topic><topic id="1sb3sum30cgg5fvk7ge5ilrdnk" modified-by="lq_lab" timestamp="1552181033295"><title>client场景下默认的新生代收集器</title></topic></topics></children></topic><topic id="7bs7bh7l57t4439khg9fpnlgjp" modified-by="lq_lab" timestamp="1552181033296"><title>复制法</title><children><topics type="attached"><topic id="5m2j4kjn1udrens0ergbr7v3fd" modified-by="lq_lab" timestamp="1552181033296"><title svg:width="500">将内存分块，将存活的部分往空闲块拷，清除块，（现在一般分为三块，一块Eden两块Survivor）</title></topic><topic id="7gee70kibc7uv0bv1i2c90468s" modified-by="lq_lab" timestamp="1552181033296"><title svg:width="500">空间连续，需要额外的空间进行分配担保，但是浪费空间，如果存活对象太多，复杂花费时间太久</title></topic></topics></children></topic><topic id="3ch0r6lrjl2klq5602i3h6cifc" modified-by="lq_lab" timestamp="1552181033297"><title>标记-移动法（标记-整理）</title><children><topics type="attached"><topic id="1ge6bfdst0ss8b8ictjkvg7aot" modified-by="lq_lab" timestamp="1552181033297"><title>所有存活的对象向一端移动，直接清理掉端边界外的内存</title></topic><topic id="389fvmhcdcfre38i6nen0mlko4" modified-by="lq_lab" timestamp="1552181033297"><title>优点是不需要额外空间进行担保</title></topic></topics></children></topic><topic id="4tkn6gto4nv4m0fn6r522r629h" modified-by="lq_lab" timestamp="1552181033299"><title>分代收集算法</title><children><topics type="attached"><topic id="16eagevt0juu8p6ldft8ob4i4v" modified-by="lq_lab" timestamp="1552181033298"><title>一种思想，并不是实际的收集算法</title></topic><topic id="6u5jk55gqab3fpb36u4kq74mgu" modified-by="lq_lab" timestamp="1552181033298"><title>新生代</title><children><topics type="attached"><topic id="0m51be8qmqmss31u566596tv3d" modified-by="lq_lab" timestamp="1552181033298"><title>复制法</title></topic></topics></children></topic><topic id="6d6ivh4s9bv914hd7vn9fkrs6j" modified-by="lq_lab" timestamp="1552181033299"><title>老年代</title><children><topics type="attached"><topic id="0u3a28sbc51a4h024t1l52fle5" modified-by="lq_lab" timestamp="1552181033299"><title>标记-清除、标记-整理算法</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="7phv2ucpk459ae2gcd55e9doc9" modified-by="lq_lab" timestamp="1552181033302"><title>基本概念</title><children><topics type="attached"><topic id="0lm780ce6odsj4rv56nj11gls3" modified-by="lq_lab" timestamp="1552181124189"><title>Safe Point(安全点)</title><children><topics type="attached"><topic id="2gojmt2c62e0bvigfllj76bq0o" modified-by="lq_lab" timestamp="1552181118997"><title>在安全点具有OopMap数据（哪些位置具有对象引用）</title></topic><topic id="6hjhm08v1e1jc1dr1cp5od5o2h" modified-by="lq_lab" timestamp="1552181230248"><title>到达方式（中断）</title><children><topics type="attached"><topic id="5o0n0vd3o2hng9cifdutu3516b" modified-by="lq_lab" timestamp="1552181194563"><title>抢先式（Preemptive Suspension）</title></topic><topic id="6q0svmabig12so3trsr8qcpdps" modified-by="lq_lab" timestamp="1552181221937"><title>主动式（Voluntary Suspension）</title></topic></topics></children></topic></topics></children></topic><topic id="15326ckfj9crsn887ep548c2pm" modified-by="lq_lab" timestamp="1552181033300"><title>Stop The World（停下所有的工作线程）</title></topic><topic id="293huohr2ehc4paecmmljptreu" modified-by="lq_lab" timestamp="1552181033302"><title>GC Root(枚举根节点)</title><children><topics type="attached"><topic id="67s1vnqf1nmuhufrct2u0v4d8a" modified-by="lq_lab" timestamp="1552181033300"><title>由系统类加载器（BootStrap）加载对对象（Class）</title></topic><topic id="7q5f2a1314ql8qjc38n9lb0hcj" modified-by="lq_lab" timestamp="1552181033301"><title>活着的线程</title></topic><topic id="4a756ejhl5lh17g0bpecl12ibq" modified-by="lq_lab" timestamp="1552181033301"><title svg:width="500">java方法的local变量或参数（理解，这些一旦存在说明方法正在被调用，这些不能回收，方法运行完能自动回收）</title></topic><topic id="6tvd4khgfcaidu1j5uic071is0" modified-by="lq_lab" timestamp="1552181033302"><title>JNI方法的Local变量或参数</title></topic><topic id="6cg2511pj6b3l39ggir2l4rhqk" modified-by="lq_lab" timestamp="1552181033302"><title>JNI全局引用</title></topic><topic id="4pdnjai5lsspta3clgebhs7749" modified-by="lq_lab" timestamp="1552181033302"><title>用于同步的监控对象</title></topic><topic id="11oqkv7iqntkpo2j8gn4mirveb" modified-by="lq_lab" timestamp="1552181033302"><title svg:width="500">Held by JVM - 用于JVM特殊目的由GC保留的对象，但实际上这个与JVM的实现是有关的</title></topic></topics></children></topic></topics></children></topic></topics></children><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>2</right-number></content></extension></extensions></topic><title>画布 1</title></sheet></xmap-revision-content>